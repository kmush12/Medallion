name: Medalion

on: [push]

env:
  JOB_1_NAME: load_data_to_bronze
  JOB_2_NAME: bronze_to_silver
  JOB_3_NAME: silver_to_gold
  GIT_TOKEN: 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 # chyba nie potrzebne

jobs:
  Release: # jakaś nazwa dla tej sekcjii
    runs-on: self-hosted
    outputs:
      output1: ${{ steps.create_1_job.outputs.groupId }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          repository: kmush12/Medallion
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - name: Install kubectl
        shell: bash
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/linux/amd64/kubectl
          sudo install kubectl /usr/local/bin/kubectl
          kubectl version --client=true

      - name: Forward port 9888 to service ilum-core
        run: |
          kubectl port-forward -n default svc/ilum-core 9888:9888 &

#Load data to Bronze

      - name: v2
        id: req # do zmiany
        run: |
          GROUP_ID=$(curl -X POST "http://localhost:9888/api/v1/group" \
          -H "Accept: application/json" \
          -H "Content-Type: multipart/form-data" \
          -F "name=$JOB_1_NAME" \
          -F "clusterName=default" \
          -F "kind=job" \
          -F "language=python" \
          -F "scale=1" \
          -F "pyRequirements=pandas" \
          -F "pyFiles=@/runner/_work/Medallion/Medallion/Jobs/load_data_to_bronze.py")
          echo $GROUP_ID
          echo "groupId=$(echo "$GROUP_ID" | jq -r '.groupId' )" >> $GITHUB_OUTPUT

      - name: Group id
        run: |
          echo "GroupId: ${{ steps.req.outputs.groupId }}"

      # strzelac Get po joba po nazwie oczekując aż wstaniee
      #nie czeka tylko co dostanie to weżmie
#      - name: Wait for the creation of a "Load data to Bronze" job
#        uses: nick-fields/retry@v3
#        id: retry
#        continue-on-error: true
#        with:
#          timeout_minutes: 11
#          max_attempts: 10
#          retry_wait_seconds: 60
#          command: |
#            curl -X GET "http://localhost:9888/api/v1/group/name/$JOB_1_NAME" \
#            -H "Accept: application/json"

      - name: Group state check
        id: check_group_status
        run: |
          while true; do
            curl -X GET "http://localhost:9888/api/v1/group/name/$JOB_1_NAME" \
              -H "Accept: application/json" \
              -s | jq -r '.jobs[].state' | grep -c READY || sleep 15
            echo "Group is not ready. Wait..."
          done
          echo "Group is ready!"


      - name: Execute "Load data to Bronze" Job
        #synchroniczny endpoint !!!
        #JOB_ID_1 = steps.run_tests.outputs.
        # jak wyciągnąc groupID z poprzedniego stage i wrzucic w url poniżej
        run: |
          curl -X POST "http://localhost:9888/api/v1/group/${{ steps.req.outputs.groupId }}/job/execute" \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -d '{"type":"interactive_job_execute","jobClass":"load_data_to_bronze.RawDataToBronze","jobConfig":{"animals_url":"https://raw.githubusercontent.com/kmush12/Medallion/master/animals.csv","owners_url":"https://raw.githubusercontent.com/kmush12/Medallion/master/owners.csv","species_url":"https://raw.githubusercontent.com/kmush12/Medallion/master/species.csv","animals_bronze_path":"s3a://ilum-files/tables/bronze/animals.csv","owners_bronze_path":"s3a://ilum-files/tables/bronze/owners.csv","species_bronze_path":"s3a://ilum-files/tables/bronze/species.csv"}}'